# -*- coding: utf-8 -*-
"""Unemploement_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mtilIKw4y12qhPUnUAIMyJZrS4MdmSFw

# **Unemployment Analysis**

This project delves into the intricate landscape of unemployment in India, employing a data-driven approach to unravel insights and patterns. The analysis utilizes two datasets - one providing an overview of unemployment and the other offering a detailed breakdown up to November 2020. The project unfolds in several key tasks, each contributing to a comprehensive understanding of the unemployment scenario in the country.

**1: Importing Libraries and Loading Data**

In this task, you import necessary libraries such as NumPy, Pandas, Matplotlib, Seaborn, Scikit-learn, and Plotly Express. Then, you load two datasets (df and df2) containing information about unemployment in India.
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
import plotly.express as px
import calendar

df = pd.read_csv("/content/Unemployment in India.csv")
df2 = pd.read_csv('/content/Unemployment_Rate_upto_11_2020.csv')

"""**2: Exploratory Data Analysis (EDA) with Pandas and Seaborn**

Here, You will perform initial exploration of the data. You check a sample of 5 rows, identify missing values, check for duplicates, and visualize the distribution of data using pie charts, bar charts, and a pair plot with Seaborn.
"""

df.sample(5)

df.isnull().sum()

df.duplicated()

df.shape

df.info()

df.describe()

df.columns

df['Region'].value_counts().plot.pie()

df['Area'].value_counts().plot.bar()

df2['Region'].value_counts().plot.pie()

sns.pairplot(df)

sns.pairplot(df, hue='Region', palette='viridis')

"""**3: Histograms of Estimated Employment and Unemployment Rates**"""

# Histogram of Estimated Employment Rate by Area

plt.style.use("default")

df.columns = ['Region', ' Date', ' Frequency', ' Estimated Unemployment Rate (%)',
       ' Estimated Employed', ' Estimated Labour Participation Rate (%)',
       'Area']
plt.figure(figsize=(10, 6))
sns.histplot(x=' Estimated Employed', hue="Area", data=df, kde=True, palette="Set2")
plt.title("Histogram of Estimated Employment Rate by Area")
plt.xlabel("Estimated Employment Rate")
plt.ylabel("Count")
plt.show()

# Histogram of Estimated Unemployment Rate by Area

plt.style.use("default")

df.columns = ['Region', ' Date', ' Frequency', ' Estimated Unemployment Rate (%)',
       ' Estimated Employed', ' Estimated Labour Participation Rate (%)',
       'Area']
plt.figure(figsize=(10, 6))
sns.histplot(x=' Estimated Unemployment Rate (%)', hue="Area", data=df, kde=True, palette="Set2")
plt.title("Histogram of Estimated Unemployment Rate by Area")
plt.xlabel("Estimated Unemployment Rate")
plt.ylabel("Count")
plt.show()

"""**4: Distribution of Estimated Unemployment Rate by Region**"""

# Distribution of Estimated UnEmployement Rate by Region

data = df[['Region', ' Estimated Unemployment Rate (%)']]
data_grouped = df.groupby('Region')[' Estimated Unemployment Rate (%)'].sum()
data_grouped.plot(kind='pie', autopct='%1.1f%%')
plt.title('Distribution of Estimated Unemployment Rate by Region')
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.show()

"""**5: Data Preprocessing and Feature Engineering**"""

df2.columns

df2.columns = ['States', 'Date', 'Frequency', 'Estimated Unemployment Rate', 'Estimated Employed',
              'Estimated Labour Participation Rate', 'Region', 'longitude', 'latitude']

# Converting 'Date' column to datetime format
df2['Date'] = pd.to_datetime(df2['Date'], dayfirst=True)

# Converting 'Frequency' and 'Region' columns to categorical data type
df2['Frequency'] = df2['Frequency'].astype('category')
df2['Region'] = df2['Region'].astype('category')

# Extracting month from 'Date' and creating a 'Month' column
df2['Month'] = df2['Date'].dt.month

# Converting 'Month' to integer format
df2['Month_int'] = df2['Month'].apply(lambda x: int(x))

# Mapping integer month values to abbreviated month names
df2['Month_name'] = df2['Month_int'].apply(lambda x: calendar.month_abbr[x])
df2.drop(columns= 'Month',inplace = True)

"""**6: Sunburst Chart for Unemployment Rate in Each Region and State**"""

# Sunburst chart showing unemployment rate in each region and state

unemplo_df = df2[['States', 'Region', 'Estimated Unemployment Rate', 'Estimated Employed', 'Estimated Labour Participation Rate']]
unemplo = unemplo_df.groupby(['Region', 'States'])['Estimated Unemployment Rate'].mean().reset_index()
fig = px.sunburst(unemplo, path=['Region', 'States'], values='Estimated Unemployment Rate',
                  color_continuous_scale='Plasma', title='Unemployment rate in each region and state',
                  height=650, template='ggplot2')
fig.show()

"""**7: Geo Scatter Plot for Impact of Lockdown on Employment**"""

fig = px.scatter_geo(df2,'longitude', 'latitude', color="Region",
                     hover_name="States", size="Estimated Unemployment Rate",
                     animation_frame="Month_name",scope='asia',template='seaborn',title='Impack of lockdown on Employement across regions')

fig.layout.updatemenus[0].buttons[0].args[1]["frame"]["duration"] = 3000

fig.update_geos(lataxis_range=[5,35], lonaxis_range=[65, 100],oceancolor="#3399FF",
    showocean=True)

fig.show()